{
  "_args": [
    [
      {
        "raw": "render-shallow@^1.1.0",
        "scope": null,
        "escapedName": "render-shallow",
        "name": "render-shallow",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/newuser/Desktop/Pairing-System-Task"
    ]
  ],
  "_from": "render-shallow@>=1.1.0 <2.0.0",
  "_id": "render-shallow@1.1.0",
  "_inCache": true,
  "_location": "/render-shallow",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/render-shallow-1.1.0.tgz_1497058938928_0.655940888216719"
  },
  "_npmUser": {
    "name": "ianmcnally",
    "email": "ianmcnally@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {
    "create-react-class": "15.6.3",
    "fbjs": "0.8.17",
    "loose-envify": "1.4.0",
    "object-assign": "4.1.1",
    "prop-types": "15.6.2"
  },
  "_requested": {
    "raw": "render-shallow@^1.1.0",
    "scope": null,
    "escapedName": "render-shallow",
    "name": "render-shallow",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/render-shallow/-/render-shallow-1.1.0.tgz",
  "_shasum": "ea906bf87b6eb5efe648284ce6699020fc8af1ce",
  "_shrinkwrap": null,
  "_spec": "render-shallow@^1.1.0",
  "_where": "/Users/newuser/Desktop/Pairing-System-Task",
  "author": {
    "name": "Ian McNally",
    "email": "ianmcnally@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/ianmcnally/render-shallow/issues"
  },
  "dependencies": {
    "react": "^15.1.0",
    "react-test-renderer": "^15.5.4"
  },
  "description": "A utility for shallow rendering in React",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-jest": "^20.0.3",
    "babel-polyfill": "^6.13.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.11.1",
    "babel-register": "^6.9.0",
    "eslint": "^3.19.0",
    "eslint-plugin-react": "^7.0.1",
    "jest": "^20.0.4",
    "prop-types": "^15.5.10",
    "sinon": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "ea906bf87b6eb5efe648284ce6699020fc8af1ce",
    "tarball": "https://registry.npmjs.org/render-shallow/-/render-shallow-1.1.0.tgz"
  },
  "gitHead": "248854b8f0759c89ace107f899f135e090a539c4",
  "homepage": "https://github.com/ianmcnally/render-shallow#readme",
  "jest": {
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    }
  },
  "keywords": [
    "shallow",
    "render",
    "react",
    "test",
    "testutil"
  ],
  "license": "ISC",
  "main": "render-shallow.js",
  "maintainers": [
    {
      "name": "ianmcnally",
      "email": "ianmcnally@gmail.com"
    }
  ],
  "name": "render-shallow",
  "optionalDependencies": {},
  "readme": "# renderShallow\n\nA utility for shallow rendering React components in tests.\n\n[![Build Status](https://travis-ci.org/ianmcnally/render-shallow.svg?branch=master)](https://travis-ci.org/ianmcnally/render-shallow)\n\n## Installation\n\nIt's available on npm as [render-shallow](https://www.npmjs.com/package/render-shallow), so you can run:\n\n`npm install --save render-shallow`\n\n## Usage\n\n`renderShallow` shallow renders a [React element](https://facebook.github.io/react/docs/glossary.html#react-elements), using React's [ShallowRenderer](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) test utility. It wraps the renderer creation, and returns the rendered component, along with some helpers to rerender the element, should it change.\n\n### API\n\n##### renderShallow\n```js\n// import renderShallow from 'render-shallow'\n// or:\n// const renderShallow = require('render-shallow')\n\nrenderShallow(element ReactElement, context ReactContext[Object, optional])\n\nreturns: Object { output ReactElement, rerender function, rerenderElement function, instance function }\n```\n\n[More on React's context.](https://facebook.github.io/react/docs/context.html)\n\n###### .output\n\nThe React element returned by the shallow renderer.\n\n###### rerender\n\n```js\nrerender()\n\nreturns: React element\n```\n\nFunction that gets the rendered output again. Useful for when a component's state has changed and the DOM should be updated.\n\n###### rerenderElement\n\n```js\nrerenderElement(newElement ReactElement, context Object[optional. Uses initial context, if specified])\n```\n\nFunction that renders `newElement` with the same render instance that `renderShallow` used. If context was initially specified, that will be reused, otherwise you can supply it. Useful for when you want to tests a props update to your component.\n\n###### instance\n```js\ninstance()\n\nreturns: Element instance\n```\n\nFunction that gets the mounted [instance](https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html) of the element. Useful if you want to check or use instance state or lifecycle methods.\n\n#### Example\n\n```js\n  // if you just want the shallow-renderer component\n  const component = renderShallow(<AReactComponent />).output\n\n  // if you want to rerender\n  const { output, rerender } = renderShallow(<AReactComponent />)\n\n  // if you want to rerender the element\n  const { output, rerenderElement } = renderShallow(<AReactComponent />)\n\n  // if you want the component's instance\n  const { instance } = renderShallow(<AReactComponent />)\n```\n\n## Why\n\nI found that in most of the React component tests I wrote, I simply wanted a shallow rendered component to test. The ShallowRenderer API is a little verbose, between the creation and the getting of the output. So I started abstracting that (the `.output` returned from `renderShallow`). When I found myself wanting to rerender the component, either because of state or props changes, I added the ability to both re-fetch the output (`rerender`), or render the element again with new props (`rerenderElement`). Some time later, when I wanted to test a lifecycle method not part of the shallow render lifecycle, I added `instance()` so I could call the lifecycle hook directly on the element instance.\n\n## Development\n\n- `npm run compile` - Builds a distributable version of the project\n\n- `npm start` - Runs tests and reruns on file change\n\n- `npm test` - Runs tests once\n\n- `npm lint` - Lints javascript",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ianmcnally/render-shallow.git"
  },
  "scripts": {
    "ci": "npm run lint && npm run test:ci",
    "compile": "babel index.js --out-file render-shallow.js",
    "lint": "eslint index.js render-shallow.spec.js",
    "prepublish": "npm run compile",
    "start": "npm run test:watch",
    "test": "jest",
    "test:ci": "npm run test:coverage",
    "test:coverage": "npm t -- --coverage",
    "test:watch": "npm t -- --watch"
  },
  "version": "1.1.0"
}
